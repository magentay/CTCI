from heapq import heappush, heappop

# python heap[0] is the smallest item
# [max_heap], median,[min_heap]

# Step 1: Add next item to one of the heaps

  # if next item is smaller than maxHeap root add it to maxHeap,
  #  else add it to minHeap
  
# Step 2: Balance the heaps (after this step heaps will be either balanced or
#   one of them will contain 1 more item)


T = int(input())

class medianFinder:
    def __init__(self):
        self.max_heap = []
        self.min_heap = []
        
    def add(self, n):
        if not self.max_heap or n > -self.max_heap[0]:
            heappush(self.min_heap, n)
            if len(self.min_heap) > len(self.max_heap) +1:
                heappush(self.max_heap, -heappop(self.min_heap))
        else:
            heappush(self.max_heap, -n)
            if len(self.max_heap)> len(self.min_heap):
                heappush(self.min_heap, -heappop(self.max_heap))
                
    def getMedian(self):
        if len(self.min_heap) == len(self.max_heap):
            return (-self.max_heap[0] + self.min_heap[0] )//2
            
        else:
            return self.min_heap[0]

mf = medianFinder()
for i in range(T):
    n = int(input())
    mf.add(n)
    
    print(mf.getMedian())
    
    
Input:
4
5
15
1 
3
Output:
5
10
5
4
